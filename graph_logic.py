from langgraph.graph import StateGraph, MessagesState, END

# Define reflection state
class reflectionstate(MessagesState):
    product_description: str
    target_audience: str
    selling_point: str

generate_prompt = """
    Craft a compelling product tagline tailored to the given parameters: {product_description}, {target_audience} and {selling_point}. 
    You, as a marketing copywriter, should write a tagline focused on capturing the essence of the product 
    while appealing to the target audience and highlighting the key selling point. Incorporate feedback {messages} to enhance the tagline.

    # Steps
    1. **Understand the Inputs:**
    - Review the given product description, target audience, and selling points.
    - Analyze any critique or feedback messages provided.

    2. **Draft the Tagline:**
    - Condense the essence of the product into a concise, memorable phrase.
    - Ensure it resonates with the target audience and emphasizes the selling point.

    3. **Revise as Needed:**
    - Just ask for feedback in the first round, and do not assume potential feedbacks
    - when feedback is given, use it to refine and improve the tagline.
    - Make sure the new version addresses any specific critiques.

    # Output Format
    - A single concise and engaging tagline.

    # Examples
    - **Input:** Product: Eco-friendly water bottle, Audience: Outdoor enthusiasts, Selling point: Keeps water cold for 24 hours.
    - **Previous Attempt:** "Stay Cool on Every Adventure."
    - **Feedback:** Not unique enough.

    - **Revised Tagline:** "Chill for the Thrill, Sustainably."

    (Real examples should consider contextual nuances provided by inputs and may require additional iterations based on feedback specifics.)

    # Notes
    - The tagline should be short, ideally 5-8 words.
    - Be creative and avoid clich√©s.
    - Ensure the tagline communicates the unique value proposition.
    - Use feedback effectively to produce a stronger tagline.
    - Your response should be very consice
    
    """

reflection_prompt = """
    Critique and provide recommendations to improve product taglines based on the given {product_description}, {target_audience}, {selling_point}, 
    and the history {messages} of taglines generated by the agent.

    - Focus on evaluating the effectiveness of the tagline in capturing the essence of the product description.
    - Consider how well the tagline appeals to the specified target audience.
    - Assess whether the tagline effectively highlights the product's key selling points.
    - Provide a constructive critique, identifying strengths and areas for improvement.

    # Steps
    1. **Analyze the provided information**:
    - Understand the {product_description}, {target_audience}, and {selling_point}.
    - Review the taglines from the generate_agent and {messages} history.

    2. **Evaluate each tagline**:
    - Check for clarity, originality, and engagement.
    - Determine how well it aligns with the {product_description} and {target_audience}.
    - Assess whether it effectively communicates the {selling_point}.

    3. **Provide recommendations**:
    - Suggest specific improvements for each tagline.
    - Highlight what works well and what can be enhanced.

    # Output Format
    - A paragraph with a detailed critique of the tagline.
    - Follow your critique with clearly structured recommendations.

    # Examples
    **Input**: 
    - Product Description: "Eco-friendly water bottle made from recycled materials."
    - Target Audience: "Environmentally conscious millennials."
    - Selling Point: "Sustainability and style."

    **Tagline History**:
    - "Hydrate with Harmony"
    - "Sip Sustainably"

    **Output**: 
    - Critique: "The tagline 'Hydrate with Harmony' captures the harmony with nature but lacks clarity on sustainability, which is a key selling point. 'Sip Sustainably' directly appeals to eco-friendliness but could be more engaging."
    - Recommendations: "For 'Hydrate with Harmony', consider integrating a stronger reference to recycling. For 'Sip Sustainably', add an element of style to attract the target audience."

    # Notes
    - Ensure recommendations are actionable and directly related to enhancing the tagline's alignment with the product description, target audience, and selling point.
    - Consider wordplay and emotional engagement in recommendations to increase the tagline's impact.
    - Your response should be very consice
    """

# Generate agent logic
def generate_agent(state: reflectionstate, model):
    prompt = generate_prompt.format(
        product_description=state["product_description"],
        target_audience=state["target_audience"],
        selling_point=state["selling_point"],
        messages=state["messages"]
    )
    try:
        response = model.invoke(prompt)
        return {"messages": [{"role": "ai", "content": response.content}]}
    except Exception as e:
        return {"messages": [{"role": "ai", "content": f"Error generating tagline: {str(e)}"}]}

# Reflection agent logic
def reflection_agent(state: reflectionstate, model):
    prompt = reflection_prompt.format(
        product_description=state["product_description"],
        target_audience=state["target_audience"],
        selling_point=state["selling_point"],
        messages=state["messages"]
    )
    try:
        response = model.invoke(prompt)
        return {"messages": [{"role": "ai", "content": response.content}]}
    except Exception as e:
        return {"messages": [{"role": "ai", "content": f"Error generating critique: {str(e)}"}]}

# Loop condition logic
def should_loop(state: reflectionstate):
    return "reflection" if len(state['messages']) <= 4 else END


# Graph setup
def setup_critique_graph(model):
    critique_graph = StateGraph(reflectionstate)

    # Directly set up the nodes with a wrapper or pass the model differently
    critique_graph.add_node("generate", lambda state: generate_agent(state, model))
    critique_graph.add_node("reflection", lambda state: reflection_agent(state, model))

    critique_graph.add_conditional_edges("generate", should_loop)
    critique_graph.add_edge("reflection", "generate")

    critique_graph.set_entry_point("generate")
    return critique_graph